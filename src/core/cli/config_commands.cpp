#include "ssmtp-mailer/cli_commands.hpp"
#include "../config/config_manager.hpp"
#include "ssmtp-mailer/config_utils.hpp"
#include "../logging/logger.hpp"
#include <iostream>
#include <fstream>
#include <sstream>
#include <filesystem>
#include <ctime>
#include <iomanip>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-function"

namespace ssmtp_mailer {

// Configuration command implementations
CLIResult ConfigCommands::addDomain(const std::vector<std::string>& args) {
        if (args.size() < 3) {
            return CLIResult::error_result("Usage: config domain add <domain> --smtp-server <server> --port <port> [options]");
        }
        
        std::string domain = args[0];
        std::string smtp_server;
        int port = 587;
        std::string auth_method = "LOGIN";
        std::string username;
        std::string password;
        bool use_ssl = false;
        bool use_starttls = true;
        
        // Parse arguments
        for (size_t i = 1; i < args.size(); ++i) {
            if (args[i] == "--smtp-server" && i + 1 < args.size()) {
                smtp_server = args[++i];
            } else if (args[i] == "--port" && i + 1 < args.size()) {
                port = std::stoi(args[++i]);
            } else if (args[i] == "--auth-method" && i + 1 < args.size()) {
                auth_method = args[++i];
            } else if (args[i] == "--username" && i + 1 < args.size()) {
                username = args[++i];
            } else if (args[i] == "--password" && i + 1 < args.size()) {
                password = args[++i];
            } else if (args[i] == "--use-ssl") {
                use_ssl = true;
                use_starttls = false;
            } else if (args[i] == "--use-starttls") {
                use_starttls = true;
                use_ssl = false;
            }
        }
        
        if (smtp_server.empty()) {
            return CLIResult::error_result("--smtp-server is required");
        }
        
        if (username.empty()) {
            username = "mailer@" + domain;
        }
        
        // Create domain configuration file
        std::string config_dir = ConfigUtils::getDomainsDirectory();
        std::string config_file = config_dir + "/" + domain + ".conf";
        
        try {
            // Ensure directory exists
            if (!ConfigUtils::ensureConfigDirectory(config_dir)) {
                return CLIResult::error_result("Failed to create configuration directory: " + config_dir);
            }
            
            // Create configuration content
            std::ostringstream config_content;
            config_content << "# Domain Configuration for " << domain << "\n";
            config_content << "# Generated by ssmtp-mailer CLI\n\n";
            config_content << "[domain:" << domain << "]\n";
            config_content << "enabled = true\n";
            config_content << "smtp_server = " << smtp_server << "\n";
            config_content << "smtp_port = " << port << "\n";
            config_content << "auth_method = " << auth_method << "\n";
            config_content << "service_account = mailer@" << domain << "\n";
            config_content << "relay_account = " << username << "\n";
            config_content << "username = " << username << "\n";
            if (!password.empty()) {
                config_content << "password = " << password << "\n";
            }
            config_content << "oauth2_token = \n";
            config_content << "use_ssl = " << (use_ssl ? "true" : "false") << "\n";
            config_content << "use_starttls = " << (use_starttls ? "true" : "false") << "\n";
            
            // Write configuration file
            std::ofstream file(config_file);
            if (!file.is_open()) {
                return CLIResult::error_result("Failed to create domain configuration file: " + config_file);
            }
            
            file << config_content.str();
            file.close();
            
            return CLIResult::success_result("Domain '" + domain + "' configuration created successfully at " + config_file);
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to create domain configuration: " + std::string(e.what()));
        }
    }
    
CLIResult ConfigCommands::listDomains(const std::vector<std::string>& args) {
        std::string domains_dir = ConfigUtils::getDomainsDirectory();
        
        try {
            if (!std::filesystem::exists(domains_dir)) {
                std::cout << "No domains configured.\n";
                return CLIResult::success_result();
            }
            
            std::cout << "Configured domains:\n";
            for (const auto& entry : std::filesystem::directory_iterator(domains_dir)) {
                if (entry.is_regular_file() && entry.path().extension() == ".conf") {
                    std::string domain = entry.path().stem().string();
                    std::cout << "  " << domain << "\n";
                }
            }
            
            return CLIResult::success_result();
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to list domains: " + std::string(e.what()));
        }
    }
    
CLIResult ConfigCommands::showDomain(const std::vector<std::string>& args) {
        if (args.empty()) {
            return CLIResult::error_result("Usage: config domain show <domain>");
        }
        
        std::string domain = args[0];
        std::string config_file = ConfigUtils::getDomainsDirectory() + "/" + domain + ".conf";
        
        try {
            if (!std::filesystem::exists(config_file)) {
                return CLIResult::error_result("Domain configuration not found: " + domain);
            }
            
            std::ifstream file(config_file);
            if (!file.is_open()) {
                return CLIResult::error_result("Failed to read domain configuration file");
            }
            
            std::cout << "Domain Configuration: " << domain << "\n";
            std::cout << "================================\n";
            
            std::string line;
            while (std::getline(file, line)) {
                if (line.empty() || line[0] == '#') continue;
                
                size_t pos = line.find('=');
                if (pos != std::string::npos) {
                    std::string key = line.substr(0, pos);
                    std::string value = line.substr(pos + 1);
                    
                    // Trim whitespace
                    key.erase(0, key.find_first_not_of(" \t"));
                    key.erase(key.find_last_not_of(" \t") + 1);
                    value.erase(0, value.find_first_not_of(" \t"));
                    value.erase(value.find_last_not_of(" \t") + 1);
                    
                    if (key == "password" && !value.empty()) {
                        value = "***hidden***";
                    }
                    
                    std::cout << "  " << key << ": " << value << "\n";
                }
            }
            
            return CLIResult::success_result();
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to show domain configuration: " + std::string(e.what()));
        }
    }
    
CLIResult ConfigCommands::addUser(const std::vector<std::string>& args) {
        if (args.size() < 3) {
            return CLIResult::error_result("Usage: config user add <email> --domain <domain> [options]");
        }
        
        std::string email = args[0];
        std::string domain;
        bool can_send_from = true;
        bool can_send_to = true;
        bool template_address = false;
        std::vector<std::string> allowed_recipients;
        std::vector<std::string> allowed_domains;
        
        // Parse arguments
        for (size_t i = 1; i < args.size(); ++i) {
            if (args[i] == "--domain" && i + 1 < args.size()) {
                domain = args[++i];
            } else if (args[i] == "--can-send-from" && i + 1 < args.size()) {
                can_send_from = (args[++i] == "true");
            } else if (args[i] == "--can-send-to" && i + 1 < args.size()) {
                can_send_to = (args[++i] == "true");
            } else if (args[i] == "--template-address") {
                template_address = true;
            } else if (args[i] == "--allowed-recipients" && i + 1 < args.size()) {
                // Parse comma-separated recipients
                std::string recipients = args[++i];
                std::istringstream ss(recipients);
                std::string recipient;
                while (std::getline(ss, recipient, ',')) {
                    recipient.erase(0, recipient.find_first_not_of(" \t"));
                    recipient.erase(recipient.find_last_not_of(" \t") + 1);
                    if (!recipient.empty()) {
                        allowed_recipients.push_back(recipient);
                    }
                }
            } else if (args[i] == "--allowed-domains" && i + 1 < args.size()) {
                // Parse comma-separated domains
                std::string domains = args[++i];
                std::istringstream ss(domains);
                std::string domain_name;
                while (std::getline(ss, domain_name, ',')) {
                    domain_name.erase(0, domain_name.find_first_not_of(" \t"));
                    domain_name.erase(domain_name.find_last_not_of(" \t") + 1);
                    if (!domain_name.empty()) {
                        allowed_domains.push_back(domain_name);
                    }
                }
            }
        }
        
        if (domain.empty()) {
            return CLIResult::error_result("--domain is required");
        }
        
        // Create user configuration file
        std::string config_dir = ConfigUtils::getUsersDirectory();
        std::string config_file = config_dir + "/" + email + ".conf";
        
        try {
            // Ensure directory exists
            if (!ConfigUtils::ensureConfigDirectory(config_dir)) {
                return CLIResult::error_result("Failed to create configuration directory: " + config_dir);
            }
            
            // Create configuration content
            std::ostringstream config_content;
            config_content << "# User Configuration for " << email << "\n";
            config_content << "# Generated by ssmtp-mailer CLI\n\n";
            config_content << "[user:" << email << "]\n";
            config_content << "enabled = true\n";
            config_content << "domain = " << domain << "\n";
            config_content << "can_send_from = " << (can_send_from ? "true" : "false") << "\n";
            config_content << "can_send_to = " << (can_send_to ? "true" : "false") << "\n";
            config_content << "template_address = " << (template_address ? "true" : "false") << "\n";
            
            if (!allowed_recipients.empty()) {
                config_content << "allowed_recipients = [";
                for (size_t i = 0; i < allowed_recipients.size(); ++i) {
                    if (i > 0) config_content << ", ";
                    config_content << "\"" << allowed_recipients[i] << "\"";
                }
                config_content << "]\n";
            }
            
            if (!allowed_domains.empty()) {
                config_content << "allowed_domains = [";
                for (size_t i = 0; i < allowed_domains.size(); ++i) {
                    if (i > 0) config_content << ", ";
                    config_content << "\"" << allowed_domains[i] << "\"";
                }
                config_content << "]\n";
            }
            
            // Write configuration file
            std::ofstream file(config_file);
            if (!file.is_open()) {
                return CLIResult::error_result("Failed to create user configuration file: " + config_file);
            }
            
            file << config_content.str();
            file.close();
            
            return CLIResult::success_result("User '" + email + "' configuration created successfully at " + config_file);
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to create user configuration: " + std::string(e.what()));
        }
    }
    
CLIResult ConfigCommands::listUsers(const std::vector<std::string>& args) {
        std::string users_dir = ConfigUtils::getUsersDirectory();
        std::string filter_domain;
        
        // Parse arguments
        for (size_t i = 0; i < args.size(); ++i) {
            if (args[i] == "--domain" && i + 1 < args.size()) {
                filter_domain = args[++i];
            }
        }
        
        try {
            if (!std::filesystem::exists(users_dir)) {
                std::cout << "No users configured.\n";
                return CLIResult::success_result();
            }
            
            std::cout << "Configured users:\n";
            for (const auto& entry : std::filesystem::directory_iterator(users_dir)) {
                if (entry.is_regular_file() && entry.path().extension() == ".conf") {
                    std::string email = entry.path().stem().string();
                    
                    // If filtering by domain, read the file to check domain
                    if (!filter_domain.empty()) {
                        std::ifstream file(entry.path());
                        std::string line;
                        bool matches_domain = false;
                        while (std::getline(file, line)) {
                            if (line.find("domain = " + filter_domain) != std::string::npos) {
                                matches_domain = true;
                                break;
                            }
                        }
                        if (!matches_domain) continue;
                    }
                    
                    std::cout << "  " << email << "\n";
                }
            }
            
            return CLIResult::success_result();
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to list users: " + std::string(e.what()));
        }
    }
    
CLIResult ConfigCommands::showGlobalConfig(const std::vector<std::string>& args) {
        std::string config_file = ConfigUtils::getConfigDirectory() + "/ssmtp-mailer.conf";
    
    try {
        if (!std::filesystem::exists(config_file)) {
            return CLIResult::error_result("Global configuration file not found: " + config_file);
        }
        
        std::ifstream file(config_file);
        if (!file.is_open()) {
            return CLIResult::error_result("Failed to read global configuration file");
        }
        
        std::cout << "Global Configuration\n";
        std::cout << "===================\n";
        
        std::string line;
        while (std::getline(file, line)) {
            if (line.empty() || line[0] == '#') continue;
            
            size_t pos = line.find('=');
            if (pos != std::string::npos) {
                std::string key = line.substr(0, pos);
                std::string value = line.substr(pos + 1);
                
                // Trim whitespace
                key.erase(0, key.find_first_not_of(" \t"));
                key.erase(key.find_last_not_of(" \t") + 1);
                value.erase(0, value.find_first_not_of(" \t"));
                value.erase(value.find_last_not_of(" \t") + 1);
                
                std::cout << "  " << key << ": " << value << "\n";
            }
        }
        
        return CLIResult::success_result();
        
    } catch (const std::exception& e) {
        return CLIResult::error_result("Failed to show global configuration: " + std::string(e.what()));
    }
}

} // namespace ssmtp_mailer

#pragma clang diagnostic pop

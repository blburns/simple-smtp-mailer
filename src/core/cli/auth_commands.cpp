#include "ssmtp-mailer/cli_commands.hpp"
#include "../logging/logger.hpp"
#include <iostream>
#include <fstream>
#include <sstream>
#include <filesystem>
#include <cstdlib>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"

namespace ssmtp_mailer {

// Authentication command implementations

CLIResult AuthCommands::setupOAuth2(const std::vector<std::string>& args) {
        std::string provider;
        std::string domain;
        std::string client_id;
        std::string client_secret;
        std::string redirect_uri = "http://localhost:8080/oauth2/callback";
        
        // Parse arguments
        for (size_t i = 0; i < args.size(); ++i) {
            if (args[i] == "--provider" && i + 1 < args.size()) {
                provider = args[++i];
            } else if (args[i] == "--domain" && i + 1 < args.size()) {
                domain = args[++i];
            } else if (args[i] == "--client-id" && i + 1 < args.size()) {
                client_id = args[++i];
            } else if (args[i] == "--client-secret" && i + 1 < args.size()) {
                client_secret = args[++i];
            } else if (args[i] == "--redirect-uri" && i + 1 < args.size()) {
                redirect_uri = args[++i];
            }
        }
        
        if (provider.empty() || domain.empty()) {
            return CLIResult::error_result("Both --provider and --domain are required");
        }
        
        if (provider != "google" && provider != "microsoft") {
            return CLIResult::error_result("Provider must be 'google' or 'microsoft'");
        }
        
        try {
            // Create OAuth2 configuration directory
            std::string oauth2_dir = "/etc/ssmtp-mailer/oauth2";
            std::filesystem::create_directories(oauth2_dir);
            
            // Create OAuth2 configuration file
            std::string config_file = oauth2_dir + "/" + domain + ".conf";
            std::ofstream file(config_file);
            
            if (!file.is_open()) {
                return CLIResult::error_result("Failed to create OAuth2 configuration file: " + config_file);
            }
            
            file << "# OAuth2 Configuration for " << domain << "\n";
            file << "# Generated by ssmtp-mailer CLI\n\n";
            file << "[oauth2:" << domain << "]\n";
            file << "provider = " << provider << "\n";
            file << "domain = " << domain << "\n";
            file << "client_id = " << client_id << "\n";
            file << "client_secret = " << client_secret << "\n";
            file << "redirect_uri = " << redirect_uri << "\n";
            file << "access_token = \n";
            file << "refresh_token = \n";
            file << "token_expires = 0\n";
            
            file.close();
            
            // Generate authorization URL
            std::string auth_url;
            if (provider == "google") {
                auth_url = "https://accounts.google.com/oauth/authorize?";
                auth_url += "client_id=" + client_id;
                auth_url += "&redirect_uri=" + redirect_uri;
                auth_url += "&scope=https://www.googleapis.com/auth/gmail.send";
                auth_url += "&response_type=code";
                auth_url += "&access_type=offline";
            } else if (provider == "microsoft") {
                auth_url = "https://login.microsoftonline.com/common/oauth2/v2.0/authorize?";
                auth_url += "client_id=" + client_id;
                auth_url += "&redirect_uri=" + redirect_uri;
                auth_url += "&scope=https://graph.microsoft.com/Mail.Send";
                auth_url += "&response_type=code";
                auth_url += "&response_mode=query";
            }
            
            std::cout << "OAuth2 setup completed for " << domain << " with " << provider << "\n";
            std::cout << "Configuration saved to: " << config_file << "\n\n";
            std::cout << "Next steps:\n";
            std::cout << "1. Visit the authorization URL:\n";
            std::cout << "   " << auth_url << "\n\n";
            std::cout << "2. Complete the OAuth2 flow and get the authorization code\n";
            std::cout << "3. Run: ssmtp-mailer auth oauth2 authorize --domain " << domain << " --code <authorization_code>\n";
            
            return CLIResult::success_result();
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to setup OAuth2: " + std::string(e.what()));
        }
    }
    
CLIResult AuthCommands::testOAuth2(const std::vector<std::string>& args) {
        std::string domain;
        
        // Parse arguments
        for (size_t i = 0; i < args.size(); ++i) {
            if (args[i] == "--domain" && i + 1 < args.size()) {
                domain = args[++i];
            }
        }
        
        if (domain.empty()) {
            return CLIResult::error_result("--domain is required");
        }
        
        std::string config_file = "/etc/ssmtp-mailer/oauth2/" + domain + ".conf";
        
        try {
            if (!std::filesystem::exists(config_file)) {
                return CLIResult::error_result("OAuth2 configuration not found for domain: " + domain);
            }
            
            std::ifstream file(config_file);
            if (!file.is_open()) {
                return CLIResult::error_result("Failed to read OAuth2 configuration file");
            }
            
            std::string line;
            std::string access_token;
            std::string refresh_token;
            std::string token_expires;
            
            while (std::getline(file, line)) {
                if (line.find("access_token = ") == 0) {
                    access_token = line.substr(15);
                } else if (line.find("refresh_token = ") == 0) {
                    refresh_token = line.substr(16);
                } else if (line.find("token_expires = ") == 0) {
                    token_expires = line.substr(16);
                }
            }
            
            file.close();
            
            if (access_token.empty()) {
                return CLIResult::error_result("No access token found. Please complete OAuth2 authorization first.");
            }
            
            // TODO: Implement actual OAuth2 token validation
            std::cout << "OAuth2 test for " << domain << ":\n";
            std::cout << "  Access Token: " << (access_token.empty() ? "Not set" : "Set") << "\n";
            std::cout << "  Refresh Token: " << (refresh_token.empty() ? "Not set" : "Set") << "\n";
            std::cout << "  Token Expires: " << token_expires << "\n";
            std::cout << "  Status: " << (access_token.empty() ? "Not authorized" : "Authorized") << "\n";
            
            return CLIResult::success_result();
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to test OAuth2: " + std::string(e.what()));
        }
    }
    
CLIResult AuthCommands::addServiceAccount(const std::vector<std::string>& args) {
        std::string domain;
        std::string service_account_file;
        
        // Parse arguments
        for (size_t i = 0; i < args.size(); ++i) {
            if (args[i] == "--domain" && i + 1 < args.size()) {
                domain = args[++i];
            } else if (args[i] == "--file" && i + 1 < args.size()) {
                service_account_file = args[++i];
            }
        }
        
        if (domain.empty() || service_account_file.empty()) {
            return CLIResult::error_result("Both --domain and --file are required");
        }
        
        try {
            if (!std::filesystem::exists(service_account_file)) {
                return CLIResult::error_result("Service account file not found: " + service_account_file);
            }
            
            // Create service account directory
            std::string service_account_dir = "/etc/ssmtp-mailer/service-accounts";
            std::filesystem::create_directories(service_account_dir);
            
            // Copy service account file
            std::string dest_file = service_account_dir + "/" + domain + ".json";
            std::filesystem::copy_file(service_account_file, dest_file);
            
            // Create service account configuration
            std::string config_file = "/etc/ssmtp-mailer/domains/" + domain + ".service-account.conf";
            std::ofstream file(config_file);
            
            if (!file.is_open()) {
                return CLIResult::error_result("Failed to create service account configuration file: " + config_file);
            }
            
            file << "# Service Account Configuration for " << domain << "\n";
            file << "# Generated by ssmtp-mailer CLI\n\n";
            file << "[service_account:" << domain << "]\n";
            file << "domain = " << domain << "\n";
            file << "service_account_file = " << dest_file << "\n";
            file << "scopes = https://www.googleapis.com/auth/gmail.send\n";
            file << "subject = mailer@" << domain << "\n";
            
            file.close();
            
            return CLIResult::success_result("Service account configuration created successfully for " + domain);
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to add service account: " + std::string(e.what()));
        }
    }
    
CLIResult AuthCommands::listServiceAccounts(const std::vector<std::string>& args) {
        std::string service_account_dir = "/etc/ssmtp-mailer/service-accounts";
        
        try {
            if (!std::filesystem::exists(service_account_dir)) {
                std::cout << "No service accounts configured.\n";
                return CLIResult::success_result();
            }
            
            std::cout << "Configured service accounts:\n";
            for (const auto& entry : std::filesystem::directory_iterator(service_account_dir)) {
                if (entry.is_regular_file() && entry.path().extension() == ".json") {
                    std::string domain = entry.path().stem().string();
                    std::cout << "  " << domain << " (" << entry.path().filename() << ")\n";
                }
            }
            
            return CLIResult::success_result();
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to list service accounts: " + std::string(e.what()));
        }
    }
    
CLIResult AuthCommands::testServiceAccount(const std::vector<std::string>& args) {
        std::string domain;
        
        // Parse arguments
        for (size_t i = 0; i < args.size(); ++i) {
            if (args[i] == "--domain" && i + 1 < args.size()) {
                domain = args[++i];
            }
        }
        
        if (domain.empty()) {
            return CLIResult::error_result("--domain is required");
        }
        
        std::string config_file = "/etc/ssmtp-mailer/domains/" + domain + ".service-account.conf";
        
        try {
            if (!std::filesystem::exists(config_file)) {
                return CLIResult::error_result("Service account configuration not found for domain: " + domain);
            }
            
            std::ifstream file(config_file);
            if (!file.is_open()) {
                return CLIResult::error_result("Failed to read service account configuration file");
            }
            
            std::string line;
            std::string service_account_file;
            
            while (std::getline(file, line)) {
                if (line.find("service_account_file = ") == 0) {
                    service_account_file = line.substr(23);
                    break;
                }
            }
            
            file.close();
            
            if (service_account_file.empty()) {
                return CLIResult::error_result("Service account file not specified in configuration");
            }
            
            if (!std::filesystem::exists(service_account_file)) {
                return CLIResult::error_result("Service account file not found: " + service_account_file);
            }
            
            // TODO: Implement actual service account validation
            std::cout << "Service account test for " << domain << ":\n";
            std::cout << "  Configuration: " << config_file << "\n";
            std::cout << "  Service Account File: " << service_account_file << "\n";
            std::cout << "  Status: Valid\n";
            
            return CLIResult::success_result();
            
        } catch (const std::exception& e) {
            return CLIResult::error_result("Failed to test service account: " + std::string(e.what()));
        }
}

} // namespace ssmtp_mailer

#pragma clang diagnostic pop
